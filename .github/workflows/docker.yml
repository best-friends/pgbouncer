name: docker

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'

jobs:
  docker-build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
      - uses: docker/metadata-action@v3
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/pgbouncer
          flavor: |
            latest=auto
          tags: |
            type=edge,branch=main
            type=match,pattern=v(.*),group=0
            type=ref,event=pr
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Clean packages
        uses: actions/github-script@v6
        if: ${{ github.event_name != 'pull_request' }}
        with:
          github-token: ${{ secrets.DELETE_PACKAGE_PAT }}
          script: |
            const containers = await github.paginate(github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg, {
              package_type: 'container',
              package_name: '${{ env.PACKAGE_NAME }}',
              org: '${{ github.repository_owner }}',
              state: 'active',
            });

            const ignoredIDs = [];
            for (const container of containers) {
              if (container.metadata.container.tags.length === 0) {
                if (ignoredIDs.shift() !== undefined) continue;

                console.log(`delete: ${container.html_url}`);
                const res = await github.rest.packages.deletePackageVersionForOrg({
                  package_type: 'container',
                  package_name: '${{ env.PACKAGE_NAME }}',
                  org: '${{ github.repository_owner }}',
                  package_version_id: container.id,
                });
                console.log(`status: ${res.status}: ${container.html_url}`);
              } else {
                // for multi architecture images
                ignoredIDs.push(
                  container.id,
                  container.id,
                );
              }
            }
        env:
          PACKAGE_NAME: pgbouncer
